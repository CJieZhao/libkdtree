libkdtree++ ChangeLog
=====================

2007-12-02 Sylvain Bougerel (sylvain.bougerel.devel@gmail.com)

	- Increased the performance of find and find_nearest/find_nearest_if by
	about 50x to 100x depending on your compilation flags.

	- KDTree are not defined as:
	KDTree<__K, _Val, _Acc, _Cmp, _Alloc>
	but as:
	KDTree<__K, _Val, _Acc, _Dist, _Cmp, _Alloc>
	So pay attention to the _Dist functor. The distance functor calculate
	the squared difference between 2 elements returned by the accessor. You
	might have to change your code to reflect the new definition, or it wont
	compile if you have set custom accessor and comparison functors.

	- The following functors are now accessible in the tree:
		- the comparison functor, accessible by copy only
		- the accessor functor, accessible by copy only
		- the distance functor, accessible read-write, this means that
		you can modify the behavior of find, find_nearest,
		find_nearest_if within the same KDTree object.

	- find_exact has not be modified and retained the code of the former,
	slower algorithm. I have to write some more code to do this. Pls wait a
	little more.

	- The file accessor.hpp was renamed as function.hpp for it now boast
	more than just the KDTree accessor

2007-11-25 Sylvain Bougerel (sylvain.bougerel.devel@gmail.com)

	- fixed the reverse_iterator. Now it can be used.

2007-10-24  Sylvain Bougerel (sylvain.bougerel.devel@gmail.com)

	- Removal of all the warnings that are yield by the compiler when
	using the following flags:
		-Wall -pedantic -ansi
	Do not hesitate to suggest any flags for additional code checking.

	This release also feature numerous of enhancements by Paul Harris
	(paulharris@computer.org):
		- const kdtrees can be searched
		- find_nearest_if() enforce validation of a predicate
		- visit_within_range() walk the tree and calls
		Visitor::operator() on template argument <Visitor> for
		each node within the range
	- find_exact() matches an kdtree::value_type by location and by
	calling kdtree::value_type::operator==() (in case two different
	items have the same location find_exact() will not return the
	wrong item)
	- erase_exact() is to erase() what find_exact() is to find()
	- check_tree() and num_dist_calcs for debugging purpose plus
	additional improvements on erase and region intersection

2004-11-26  Paul Harris (paulharris@computer.org)

	- New feature: find_nearest()
	- Accessors can now be initialised with the tree, so ptr_fun() 
		or functors can be used to access datapoints.
	- Accessors now much more generic, so you can use the same 
		accessor to access multiple types.
	- Range-constructors now optimise() automatically, simplifying 
		the construction of a filled tree.
	- _Range is now more easy to construct.

2004-11-15  Martin F. Krafft (libkdtree@pobox.madduck.net)

	- fixed numerous little bugs that led to compilation problems
	- changed code to compile cleanly with GCC 3.4 and GCC 4.0

2004-11-06  Martin F. Krafft (libkdtree@pobox.madduck.net)

	- reverted to optimise() to prevent API change, and added an optimize()
	  passthrough method with an appropriate comment.

2004-11-05  Paul Harris (paulharris@computer.org)

	- Renamed optimise() to optimize().
	- Added a full set of range constructors and insert(range) methods.
		it now works with inserter(tree,tree.begin())
	- Target type no longer needs a default constructor. This also fixes
		problems with empty trees (would crash if optimized).
	- Some code cleanup (removed inlines, switched from const_iterator to
		iterator, added this-> to ensure the methods are called).
	- Added a new method: count_within_range().
	- Fixed bug in rend().

2004-11-04  Martin F. Krafft (libkdtree@pobox.madduck.net)

	- Integrated patch by Paul Harris to fix a logic error pertaining to
		OutputIterators in find_within_range. find_within_range() now
		returns the output iterator instead of a count. Thanks, Paul!
	- Added another fix by Paul Harris to _M_get_j_max, which would cause
		a dimensional overflow for trees with depths >= K. Thanks (again) Paul!
	- Made some improvements to the autotools files.

2004-05-11  Martin F. Krafft (libkdtree@pobox.madduck.net)

	- Fixed CFlags and Libs entries in pkgconfig file.

2004-05-11  Martin F. Krafft (libkdtree@pobox.madduck.net)

	- Initial release.


 COPYRIGHT --
 libkdtree++ is (c) 2004-2007 Martin F. Krafft <libkdtree@pobox.madduck.net> and
 Sylvain Bougerel <sylvain.bougerel.devel@gmail.com> and distributed under the
 terms of the Artistic License 2.0. See the ./COPYING file in the source tree
 root for more information.
	
 THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES,
 INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND
 FITNESS FOR A PARTICULAR PURPOSE.
